// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StreamingAPI.Data;

#nullable disable

namespace ANG_API_Assess.Migrations
{
    [DbContext(typeof(context))]
    partial class contextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StreamingAPI.Models.Media", b =>
                {
                    b.Property<int>("MediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MediaId"));

                    b.Property<int>("DurationInMinutes")
                        .HasColumnType("int");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MediaType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MediaId");

                    b.ToTable("Media", (string)null);

                    b.HasData(
                        new
                        {
                            MediaId = 1,
                            DurationInMinutes = 4,
                            Genre = "Pop",
                            MediaType = "Music",
                            ReleaseDate = new DateTime(2017, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Shape of You",
                            Url = "/media/shapeofyou.mp3"
                        },
                        new
                        {
                            MediaId = 2,
                            DurationInMinutes = 148,
                            Genre = "Sci-Fi",
                            MediaType = "Video",
                            ReleaseDate = new DateTime(2010, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Inception",
                            Url = "/media/inception.mp4"
                        });
                });

            modelBuilder.Entity("StreamingAPI.Models.Playlist", b =>
                {
                    b.Property<int>("PlaylistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlaylistId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PlaylistId");

                    b.HasIndex("UserId");

                    b.ToTable("Playlists", (string)null);

                    b.HasData(
                        new
                        {
                            PlaylistId = 1,
                            Name = "Favorites",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("StreamingAPI.Models.PlaylistMedia", b =>
                {
                    b.Property<int>("PlaylistId")
                        .HasColumnType("int");

                    b.Property<int>("MediaId")
                        .HasColumnType("int");

                    b.HasKey("PlaylistId", "MediaId");

                    b.HasIndex("MediaId");

                    b.ToTable("PlaylistMedias", (string)null);

                    b.HasData(
                        new
                        {
                            PlaylistId = 1,
                            MediaId = 1
                        },
                        new
                        {
                            PlaylistId = 1,
                            MediaId = 2
                        });
                });

            modelBuilder.Entity("StreamingAPI.Models.SubscriptionPlan", b =>
                {
                    b.Property<int>("SubscriptionPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscriptionPlanId"));

                    b.Property<bool>("IsDownloadAllowed")
                        .HasColumnType("bit");

                    b.Property<int>("MaxDevices")
                        .HasColumnType("int");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SubscriptionPlanId");

                    b.ToTable("SubscriptionPlans", (string)null);

                    b.HasData(
                        new
                        {
                            SubscriptionPlanId = 1,
                            IsDownloadAllowed = false,
                            MaxDevices = 1,
                            PlanName = "Free",
                            Price = 0m
                        },
                        new
                        {
                            SubscriptionPlanId = 2,
                            IsDownloadAllowed = true,
                            MaxDevices = 3,
                            PlanName = "Premium",
                            Price = 9.99m
                        },
                        new
                        {
                            SubscriptionPlanId = 3,
                            IsDownloadAllowed = true,
                            MaxDevices = 5,
                            PlanName = "Family",
                            Price = 14.99m
                        });
                });

            modelBuilder.Entity("StreamingAPI.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SubscriptionPlanId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.HasIndex("SubscriptionPlanId");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "admin@stream.com",
                            PasswordHash = "hashedpass1",
                            Role = "Admin",
                            SubscriptionPlanId = 2,
                            UserName = "AdminUser"
                        },
                        new
                        {
                            UserId = 2,
                            Email = "john@example.com",
                            PasswordHash = "hashedpass2",
                            Role = "Subscriber",
                            SubscriptionPlanId = 1,
                            UserName = "JohnDoe"
                        });
                });

            modelBuilder.Entity("StreamingAPI.Models.Playlist", b =>
                {
                    b.HasOne("StreamingAPI.Models.User", "User")
                        .WithMany("Playlists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StreamingAPI.Models.PlaylistMedia", b =>
                {
                    b.HasOne("StreamingAPI.Models.Media", "Media")
                        .WithMany("PlaylistMedias")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StreamingAPI.Models.Playlist", "Playlist")
                        .WithMany("PlaylistMedias")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Media");

                    b.Navigation("Playlist");
                });

            modelBuilder.Entity("StreamingAPI.Models.User", b =>
                {
                    b.HasOne("StreamingAPI.Models.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany("Users")
                        .HasForeignKey("SubscriptionPlanId");

                    b.Navigation("SubscriptionPlan");
                });

            modelBuilder.Entity("StreamingAPI.Models.Media", b =>
                {
                    b.Navigation("PlaylistMedias");
                });

            modelBuilder.Entity("StreamingAPI.Models.Playlist", b =>
                {
                    b.Navigation("PlaylistMedias");
                });

            modelBuilder.Entity("StreamingAPI.Models.SubscriptionPlan", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("StreamingAPI.Models.User", b =>
                {
                    b.Navigation("Playlists");
                });
#pragma warning restore 612, 618
        }
    }
}
